openapi: 3.0.3
info:
  title: FedWell Platform - OpenAPI 3.0
  description: |-
    This is the first approach of the API of the Fedwell Platform based on the OpenAPI 3.0 specification.
  version: 1.0.0
servers:
  - url: https://localhost/api/v3
tags:
  - name: patient
    description: Operations about a patient
  - name: physiotherapist
    description: Operations about a physiotherapist
  - name: excercise
    description: Operations about an exercise
paths:
  /patient:
    post:
      tags:
        - patient
      summary: Create patient
      description: This can only be done by the logged in user.
      operationId: createPatient
      requestBody:
        description: Created patient object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Patient'
          application/xml:
            schema:
              $ref: '#/components/schemas/Patient'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Patient'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'
            application/xml:
              schema:
                $ref: '#/components/schemas/Patient'
  /patient/createWithList:
    post:
      tags:
        - patient
      summary: Creates list of patients with given input array
      description: Creates list of patients with given input array
      operationId: createPatientWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Patient'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Patient'
        default:
          description: successful operation
  /patient/login:
    get:
      tags:
        - patient
      summary: Logs patient into the system
      description: ''
      operationId: loginPatient
      parameters:
        - name: username
          in: query
          description: The user name for patient login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for patient login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /patient/logout:
    get:
      tags:
        - patient
      summary: Logs out current logged in patient session
      description: ''
      operationId: logoutPatient
      parameters: []
      responses:
        default:
          description: successful operation
  /patient/{username}:
    get:
      tags:
        - patient
      summary: Get patient by user name
      description: ''
      operationId: getPatientByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Patient'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - patient
      summary: Update patient
      description: This can only be done by the logged in patient.
      operationId: updatePatient
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent patient
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Patient'
          application/xml:
            schema:
              $ref: '#/components/schemas/Patient'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Patient'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - patient
      summary: Delete patient
      description: This can only be done by the logged in patient.
      operationId: deletePatient
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /physiotherapist:
    post:
      tags:
        - physiotherapist
      summary: Create physiotherapist
      description: This can only be done by the logged in user.
      operationId: createPhysiotherapist
      requestBody:
        description: Created physiotherapist object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Physiotherapist'
          application/xml:
            schema:
              $ref: '#/components/schemas/Physiotherapist'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Physiotherapist'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Physiotherapist'
            application/xml:
              schema:
                $ref: '#/components/schemas/Physiotherapist'
  /physiotherapist/createWithList:
    post:
      tags:
        - physiotherapist
      summary: Creates list of physiotherapists with given input array
      description: Creates list of physiotherapists with given input array
      operationId: createPhysiotherapistWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Physiotherapist'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Physiotherapist'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Physiotherapist'
        default:
          description: successful operation
  /physiotherapist/login:
    get:
      tags:
        - physiotherapist
      summary: Logs physiotherapist into the system
      description: ''
      operationId: loginPhysiotherapist
      parameters:
        - name: username
          in: query
          description: The user name for physiotherapist login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for physiotherapist login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /physiotherapist/logout:
    get:
      tags:
        - physiotherapist
      summary: Logs out current logged in physiotherapist session
      description: ''
      operationId: logoutPhysiotherapist
      parameters: []
      responses:
        default:
          description: successful operation
  /physiotherapist/{username}:
    get:
      tags:
        - physiotherapist
      summary: Get physiotherapist by user name
      description: ''
      operationId: getPhysiotherapistByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Physiotherapist'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Physiotherapist'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - physiotherapist
      summary: Update physiotherapist
      description: This can only be done by the logged in physiotherapist.
      operationId: updatePhysiotherapist
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent physiotherapist
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Physiotherapist'
          application/xml:
            schema:
              $ref: '#/components/schemas/Physiotherapist'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Physiotherapist'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - physiotherapist
      summary: Delete physiotherapist
      description: This can only be done by the logged in physiotherapist.
      operationId: deletePhysiotherapist
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    Patient:
      allOf:
        - $ref: '#/components/schemas/Person'
        - properties:
            hobbies:
              type: string
              example: 'reading'
            username:
              type: string
              example: patient01
          xml:
            name: patient
    Physiotherapist:
      allOf:
        - $ref: '#/components/schemas/Person'
        - properties:
            yearsOfPactice:
              type: integer
              example: 12
            username:
              type: string
              example: physiotherapist01
          xml:
            name: physiotherapist
    Person:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: user123
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        street:
          type: string
          example: Main Street
        houseNumber:
          type: string
          example: '12A'
        postalCode:
          type: string
          example: '12345'
        city:
          type: string
          example: Berlin
        phoneNumber:
          type: string
          example: '12345'
        email:
          type: string
          format: email
          example: john@email.com
        dateOfBirth:
          type: string
          format: date
          example: '1960-08-10'
        gender:
          type: string
          example: male
          enum:
            - unknown
            - male
            - female
            - other
            - preferNotToSay
        maritalStatus:
          type: string
          example: married
          enum:
            - unknown
            - single
            - married
            - divorced
            - widowed
            - other
            - preferNotToSay
        password:
          type: string
          format: password
          example: '12345'
        noOfChildren:
          type: integer
          format: int32
          example: 1
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: person
  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Patient'